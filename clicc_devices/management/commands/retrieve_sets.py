from django.core.management.base import BaseCommand
from django.utils import timezone
from clicc_devices.models import Set, Item
import logging
import argparse
import os
from alma_api_client import AlmaAPIClient


class Command(BaseCommand):
    help = "Retrieve sets from Alma and store them in the database"

    def add_arguments(self, parser: argparse.ArgumentParser) -> None:
        """Add command line arguments for the management command.

        :param parser: Argument parser instance to add arguments to.
        :return: None
        """
        parser.add_argument(
            "--set_id",
            type=str,
            help="Retrieve a specific set by Alma set ID",
            required=False,
        )

    def handle(self, *args, **options) -> None:

        logger = logging.getLogger(__name__)
        logging.basicConfig(level=logging.INFO)
        # Suppress DEBUG logs from urllib3, generated by the Alma API client
        logging.getLogger("urllib3").setLevel(logging.INFO)

        set_id = options.get("set_id")
        api_key = os.getenv("ALMA_API_KEY")
        if not api_key:
            logger.error("ALMA_API_KEY environment variable is not set.")
            return
        alma_client = AlmaAPIClient(api_key)

        if set_id:
            if not Set.objects.filter(alma_set_id=set_id).exists():
                logger.error(f"Set with Alma ID {set_id} does not exist.")
                return
            sets_to_process = [Set.objects.get(alma_set_id=set_id)]
        else:
            sets_to_process = Set.objects.all()

        logger.info(f"Starting retrieval for {len(sets_to_process)} set(s) from Alma.")
        for set_obj in sets_to_process:
            logger.info(
                f"Starting retrieval for set: {set_obj.name} (Alma ID: {set_obj.alma_set_id})"
            )

            # Remove existing items associated with the set
            Item.objects.filter(set=set_obj).delete()

            # Retrieve set from Alma
            alma_set = alma_client.get_set(set_obj.alma_set_id)

            # Iterate through the members of the Alma set,
            # and create Item objects for each member
            for alma_item in alma_set.members:
                Item.objects.create(
                    set=set_obj,
                    barcode=alma_item.description,
                )

            # Update the retrieved date/time for the set
            set_obj.retrieved = timezone.now()
            set_obj.save()

            num_items = Item.objects.filter(set=set_obj).count()
            logger.info(
                f"Finished retrieval for set: {set_obj.name} "
                f"(Alma ID: {set_obj.alma_set_id}). "
                f"Items retrieved: {num_items}."
            )
